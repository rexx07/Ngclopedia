// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ngclopedia.Infrastructure.Persistence.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ngclopedia.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Administrations.PoliticalOffice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CurrentTenureEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CurrentTenureStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Functions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("NextElection")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Office")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PoliticalOfficeHolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PoliticalPartyId")
                        .HasColumnType("uuid");

                    b.Property<int>("TermLimits")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PoliticalOfficeHolderId");

                    b.HasIndex("PoliticalPartyId");

                    b.ToTable("Political Offices", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Administrations.PoliticalOfficeHolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AlmaMater")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<List<string>>("Awards")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Children")
                        .HasColumnType("text[]");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<List<string>>("Occupations")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("OtherNames")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("PoliticalAffiliations")
                        .HasColumnType("text[]");

                    b.Property<Guid?>("PoliticalOfficeId")
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Relatives")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Spouses")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("PoliticalOfficeId");

                    b.ToTable("Political Office Holder", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Administrations.PoliticalParty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EstMembersCount")
                        .HasColumnType("integer");

                    b.Property<List<string>>("FormerNames")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("Founded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Founders")
                        .HasColumnType("text[]");

                    b.Property<string>("GoverningBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ideology")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Merged")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PartyChairman")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PartySecretary")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PoliticalOfficeHolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PoliticalPartyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slogan")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("colours")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("PoliticalOfficeHolderId");

                    b.HasIndex("PoliticalPartyId");

                    b.ToTable("Political Parties", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Auth.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Auth.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Common.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid?>("PoliticalOfficeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PoliticalPartyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipPostalCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PoliticalOfficeId");

                    b.HasIndex("PoliticalPartyId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Common.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Emails")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("FacebookName")
                        .HasColumnType("text");

                    b.Property<string>("InstagramUsername")
                        .HasColumnType("text");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<List<string>>("PhoneNumbers")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid?>("PoliticalOfficeHolderId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PoliticalOfficeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PoliticalPartyId")
                        .HasColumnType("uuid");

                    b.Property<string>("TwitterUsername")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PoliticalOfficeHolderId");

                    b.HasIndex("PoliticalOfficeId");

                    b.HasIndex("PoliticalPartyId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Common.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdminLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AdminType")
                        .HasColumnType("integer");

                    b.Property<int>("Continent")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationBasedCommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("Pcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationBasedCommunityId");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Communities.CategoryBasedCommunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("Categories")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("FAQ")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Info")
                        .HasColumnType("text[]");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<List<string>>("Rules")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ContactId");

                    b.ToTable("Category Based Communities", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Communities.LocationBasedCommunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("FAQ")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Info")
                        .HasColumnType("text[]");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<List<string>>("Rules")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ContactId");

                    b.ToTable("Location Based Communities", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Forums.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowComments")
                        .HasColumnType("boolean");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("text");

                    b.Property<int>("ArticleCommunity")
                        .HasColumnType("integer");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CategoryBasedCommunityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Edited")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Edits")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationBasedCommunityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("PublishedStatus")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("CategoryBasedCommunityId");

                    b.HasIndex("LocationBasedCommunityId");

                    b.HasIndex("LocationId");

                    b.ToTable("Articles", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Forums.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("text");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Edited")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("Edits")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Forums.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("text");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastUpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("ReactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.ToTable("Reactions", (string)null);
                });

            modelBuilder.Entity("Ngclopedia.Domain.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CategoryBasedCommunityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryBasedCommunityId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryBasedCommunityId2")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationBasedCommunityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationBasedCommunityId1")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LocationBasedCommunityId2")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryBasedCommunityId");

                    b.HasIndex("CategoryBasedCommunityId1");

                    b.HasIndex("CategoryBasedCommunityId2");

                    b.HasIndex("LocationBasedCommunityId");

                    b.HasIndex("LocationBasedCommunityId1");

                    b.HasIndex("LocationBasedCommunityId2");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ngclopedia.Domain.Administrations.PoliticalOffice", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalOfficeHolder", null)
                        .WithMany("PoliticalOffices")
                        .HasForeignKey("PoliticalOfficeHolderId");

                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalParty", null)
                        .WithMany("PoliticalOffices")
                        .HasForeignKey("PoliticalPartyId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Administrations.PoliticalOfficeHolder", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalOffice", null)
                        .WithMany("PoliticalOfficeHolders")
                        .HasForeignKey("PoliticalOfficeId");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Administrations.PoliticalParty", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalOfficeHolder", null)
                        .WithMany("PoliticalParties")
                        .HasForeignKey("PoliticalOfficeHolderId");

                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalParty", null)
                        .WithMany("MergedParties")
                        .HasForeignKey("PoliticalPartyId");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Auth.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Auth.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ngclopedia.Domain.Common.Address", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Ngclopedia.Domain.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalOffice", null)
                        .WithMany("Addresses")
                        .HasForeignKey("PoliticalOfficeId");

                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalParty", null)
                        .WithMany("Addresses")
                        .HasForeignKey("PoliticalPartyId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Common.Contact", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalOfficeHolder", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PoliticalOfficeHolderId");

                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalOffice", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PoliticalOfficeId");

                    b.HasOne("Ngclopedia.Domain.Administrations.PoliticalParty", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PoliticalPartyId");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Common.Location", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Communities.LocationBasedCommunity", null)
                        .WithMany("OtherLocations")
                        .HasForeignKey("LocationBasedCommunityId");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Communities.CategoryBasedCommunity", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ngclopedia.Domain.Common.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Communities.LocationBasedCommunity", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ngclopedia.Domain.Common.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Forums.Article", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", null)
                        .WithMany("Articles")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Ngclopedia.Domain.Communities.CategoryBasedCommunity", null)
                        .WithMany("Articles")
                        .HasForeignKey("CategoryBasedCommunityId");

                    b.HasOne("Ngclopedia.Domain.Communities.LocationBasedCommunity", null)
                        .WithMany("Articles")
                        .HasForeignKey("LocationBasedCommunityId");

                    b.HasOne("Ngclopedia.Domain.Common.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Forums.Comment", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", null)
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Ngclopedia.Domain.Forums.Article", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId");

                    b.HasOne("Ngclopedia.Domain.Forums.Comment", null)
                        .WithMany("Replies")
                        .HasForeignKey("CommentId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Forums.Reaction", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ngclopedia.Domain.Users.ApplicationUser", null)
                        .WithMany("Reactions")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("Ngclopedia.Domain.Forums.Article", null)
                        .WithMany("Reactions")
                        .HasForeignKey("ArticleId");

                    b.HasOne("Ngclopedia.Domain.Forums.Comment", null)
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Users.ApplicationUser", b =>
                {
                    b.HasOne("Ngclopedia.Domain.Communities.CategoryBasedCommunity", null)
                        .WithMany("Excos")
                        .HasForeignKey("CategoryBasedCommunityId");

                    b.HasOne("Ngclopedia.Domain.Communities.CategoryBasedCommunity", null)
                        .WithMany("Followers")
                        .HasForeignKey("CategoryBasedCommunityId1");

                    b.HasOne("Ngclopedia.Domain.Communities.CategoryBasedCommunity", null)
                        .WithMany("Members")
                        .HasForeignKey("CategoryBasedCommunityId2");

                    b.HasOne("Ngclopedia.Domain.Communities.LocationBasedCommunity", null)
                        .WithMany("Excos")
                        .HasForeignKey("LocationBasedCommunityId");

                    b.HasOne("Ngclopedia.Domain.Communities.LocationBasedCommunity", null)
                        .WithMany("Followers")
                        .HasForeignKey("LocationBasedCommunityId1");

                    b.HasOne("Ngclopedia.Domain.Communities.LocationBasedCommunity", null)
                        .WithMany("Members")
                        .HasForeignKey("LocationBasedCommunityId2");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Administrations.PoliticalOffice", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");

                    b.Navigation("PoliticalOfficeHolders");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Administrations.PoliticalOfficeHolder", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("PoliticalOffices");

                    b.Navigation("PoliticalParties");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Administrations.PoliticalParty", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Contacts");

                    b.Navigation("MergedParties");

                    b.Navigation("PoliticalOffices");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Communities.CategoryBasedCommunity", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Excos");

                    b.Navigation("Followers");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Communities.LocationBasedCommunity", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Excos");

                    b.Navigation("Followers");

                    b.Navigation("Members");

                    b.Navigation("OtherLocations");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Forums.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Forums.Comment", b =>
                {
                    b.Navigation("Reactions");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Ngclopedia.Domain.Users.ApplicationUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("Contacts");

                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
